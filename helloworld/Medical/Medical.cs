// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: medical.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Medical {

  /// <summary>Holder for reflection information generated from medical.proto</summary>
  public static partial class MedicalReflection {

    #region Descriptor
    /// <summary>File descriptor for medical.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MedicalReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1tZWRpY2FsLnByb3RvEgdtZWRpY2FsIgcKBUVtcHR5InAKC01lZGljYWxE",
            "YXRhEhMKC1BhdGllbnROYW1lGAEgASgJEhIKCkRvY3Rvck5hbWUYAiABKAkS",
            "DAoERGF0ZRgDIAEoAxIqCgdSZXN1bHRzGAQgAygLMhkubWVkaWNhbC5TaW5n",
            "bGVUZXN0UmVzdWx0Ij0KEFNpbmdsZVRlc3RSZXN1bHQSDAoETmFtZRgBIAEo",
            "CRINCgVWYWx1ZRgCIAEoARIMCgRVbml0GAMgASgJIh4KDlBhdGllbnRSZXF1",
            "ZXN0EgwKBG5hbWUYASABKAkidQoNRmlsdGVyUmVxdWVzdBITCgtwYXRpZW50",
            "TmFtZRgBIAEoCRISCgpyZWNvcmROYW1lGAIgASgJEhIKCmRvY3Rvck5hbWUY",
            "AyABKAkSEQoJc3RhcnREYXRlGAQgASgDEhQKDG1pbmltYWxWYWx1ZRgFIAEo",
            "ATJVChNEb2N0b3JSZXN1bHRzR2V0dGVyEj4KCkdldFJlc3VsdHMSFi5tZWRp",
            "Y2FsLkZpbHRlclJlcXVlc3QaFC5tZWRpY2FsLk1lZGljYWxEYXRhIgAwATJQ",
            "ChZUZWNobmljaWFuUmVzdWx0c0FkZGVyEjYKDEFkZE5ld1Jlc3VsdBIULm1l",
            "ZGljYWwuTWVkaWNhbERhdGEaDi5tZWRpY2FsLkVtcHR5IgAyVwoUUGF0aWVu",
            "dFJlc3VsdHNHZXR0ZXISPwoKR2V0UmVzdWx0cxIXLm1lZGljYWwuUGF0aWVu",
            "dFJlcXVlc3QaFC5tZWRpY2FsLk1lZGljYWxEYXRhIgAwAUIwChhpby5ncnBj",
            "LmV4YW1wbGVzLm1lZGljYWxCDG1lZGljYWxQcm90b1ABogIDSExXYgZwcm90",
            "bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Medical.Empty), global::Medical.Empty.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Medical.MedicalData), global::Medical.MedicalData.Parser, new[]{ "PatientName", "DoctorName", "Date", "Results" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Medical.SingleTestResult), global::Medical.SingleTestResult.Parser, new[]{ "Name", "Value", "Unit" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Medical.PatientRequest), global::Medical.PatientRequest.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Medical.FilterRequest), global::Medical.FilterRequest.Parser, new[]{ "PatientName", "RecordName", "DoctorName", "StartDate", "MinimalValue" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Empty : pb::IMessage<Empty> {
    private static readonly pb::MessageParser<Empty> _parser = new pb::MessageParser<Empty>(() => new Empty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Empty> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Medical.MedicalReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Empty() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Empty(Empty other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Empty Clone() {
      return new Empty(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Empty);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Empty other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Empty other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class MedicalData : pb::IMessage<MedicalData> {
    private static readonly pb::MessageParser<MedicalData> _parser = new pb::MessageParser<MedicalData>(() => new MedicalData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MedicalData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Medical.MedicalReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MedicalData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MedicalData(MedicalData other) : this() {
      patientName_ = other.patientName_;
      doctorName_ = other.doctorName_;
      date_ = other.date_;
      results_ = other.results_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MedicalData Clone() {
      return new MedicalData(this);
    }

    /// <summary>Field number for the "PatientName" field.</summary>
    public const int PatientNameFieldNumber = 1;
    private string patientName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PatientName {
      get { return patientName_; }
      set {
        patientName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DoctorName" field.</summary>
    public const int DoctorNameFieldNumber = 2;
    private string doctorName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DoctorName {
      get { return doctorName_; }
      set {
        doctorName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Date" field.</summary>
    public const int DateFieldNumber = 3;
    private long date_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Date {
      get { return date_; }
      set {
        date_ = value;
      }
    }

    /// <summary>Field number for the "Results" field.</summary>
    public const int ResultsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Medical.SingleTestResult> _repeated_results_codec
        = pb::FieldCodec.ForMessage(34, global::Medical.SingleTestResult.Parser);
    private readonly pbc::RepeatedField<global::Medical.SingleTestResult> results_ = new pbc::RepeatedField<global::Medical.SingleTestResult>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Medical.SingleTestResult> Results {
      get { return results_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MedicalData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MedicalData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PatientName != other.PatientName) return false;
      if (DoctorName != other.DoctorName) return false;
      if (Date != other.Date) return false;
      if(!results_.Equals(other.results_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PatientName.Length != 0) hash ^= PatientName.GetHashCode();
      if (DoctorName.Length != 0) hash ^= DoctorName.GetHashCode();
      if (Date != 0L) hash ^= Date.GetHashCode();
      hash ^= results_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PatientName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PatientName);
      }
      if (DoctorName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DoctorName);
      }
      if (Date != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Date);
      }
      results_.WriteTo(output, _repeated_results_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PatientName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PatientName);
      }
      if (DoctorName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DoctorName);
      }
      if (Date != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Date);
      }
      size += results_.CalculateSize(_repeated_results_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MedicalData other) {
      if (other == null) {
        return;
      }
      if (other.PatientName.Length != 0) {
        PatientName = other.PatientName;
      }
      if (other.DoctorName.Length != 0) {
        DoctorName = other.DoctorName;
      }
      if (other.Date != 0L) {
        Date = other.Date;
      }
      results_.Add(other.results_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PatientName = input.ReadString();
            break;
          }
          case 18: {
            DoctorName = input.ReadString();
            break;
          }
          case 24: {
            Date = input.ReadInt64();
            break;
          }
          case 34: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SingleTestResult : pb::IMessage<SingleTestResult> {
    private static readonly pb::MessageParser<SingleTestResult> _parser = new pb::MessageParser<SingleTestResult>(() => new SingleTestResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SingleTestResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Medical.MedicalReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleTestResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleTestResult(SingleTestResult other) : this() {
      name_ = other.name_;
      value_ = other.value_;
      unit_ = other.unit_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleTestResult Clone() {
      return new SingleTestResult(this);
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Value" field.</summary>
    public const int ValueFieldNumber = 2;
    private double value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "Unit" field.</summary>
    public const int UnitFieldNumber = 3;
    private string unit_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Unit {
      get { return unit_; }
      set {
        unit_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SingleTestResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SingleTestResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Value != other.Value) return false;
      if (Unit != other.Unit) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Value != 0D) hash ^= Value.GetHashCode();
      if (Unit.Length != 0) hash ^= Unit.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Value != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Value);
      }
      if (Unit.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Unit);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Value != 0D) {
        size += 1 + 8;
      }
      if (Unit.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Unit);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SingleTestResult other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Value != 0D) {
        Value = other.Value;
      }
      if (other.Unit.Length != 0) {
        Unit = other.Unit;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 17: {
            Value = input.ReadDouble();
            break;
          }
          case 26: {
            Unit = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PatientRequest : pb::IMessage<PatientRequest> {
    private static readonly pb::MessageParser<PatientRequest> _parser = new pb::MessageParser<PatientRequest>(() => new PatientRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PatientRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Medical.MedicalReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PatientRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PatientRequest(PatientRequest other) : this() {
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PatientRequest Clone() {
      return new PatientRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PatientRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PatientRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PatientRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FilterRequest : pb::IMessage<FilterRequest> {
    private static readonly pb::MessageParser<FilterRequest> _parser = new pb::MessageParser<FilterRequest>(() => new FilterRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FilterRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Medical.MedicalReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FilterRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FilterRequest(FilterRequest other) : this() {
      patientName_ = other.patientName_;
      recordName_ = other.recordName_;
      doctorName_ = other.doctorName_;
      startDate_ = other.startDate_;
      minimalValue_ = other.minimalValue_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FilterRequest Clone() {
      return new FilterRequest(this);
    }

    /// <summary>Field number for the "patientName" field.</summary>
    public const int PatientNameFieldNumber = 1;
    private string patientName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PatientName {
      get { return patientName_; }
      set {
        patientName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "recordName" field.</summary>
    public const int RecordNameFieldNumber = 2;
    private string recordName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RecordName {
      get { return recordName_; }
      set {
        recordName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "doctorName" field.</summary>
    public const int DoctorNameFieldNumber = 3;
    private string doctorName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DoctorName {
      get { return doctorName_; }
      set {
        doctorName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "startDate" field.</summary>
    public const int StartDateFieldNumber = 4;
    private long startDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartDate {
      get { return startDate_; }
      set {
        startDate_ = value;
      }
    }

    /// <summary>Field number for the "minimalValue" field.</summary>
    public const int MinimalValueFieldNumber = 5;
    private double minimalValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MinimalValue {
      get { return minimalValue_; }
      set {
        minimalValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FilterRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FilterRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PatientName != other.PatientName) return false;
      if (RecordName != other.RecordName) return false;
      if (DoctorName != other.DoctorName) return false;
      if (StartDate != other.StartDate) return false;
      if (MinimalValue != other.MinimalValue) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PatientName.Length != 0) hash ^= PatientName.GetHashCode();
      if (RecordName.Length != 0) hash ^= RecordName.GetHashCode();
      if (DoctorName.Length != 0) hash ^= DoctorName.GetHashCode();
      if (StartDate != 0L) hash ^= StartDate.GetHashCode();
      if (MinimalValue != 0D) hash ^= MinimalValue.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PatientName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PatientName);
      }
      if (RecordName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RecordName);
      }
      if (DoctorName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DoctorName);
      }
      if (StartDate != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(StartDate);
      }
      if (MinimalValue != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(MinimalValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PatientName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PatientName);
      }
      if (RecordName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RecordName);
      }
      if (DoctorName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DoctorName);
      }
      if (StartDate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartDate);
      }
      if (MinimalValue != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FilterRequest other) {
      if (other == null) {
        return;
      }
      if (other.PatientName.Length != 0) {
        PatientName = other.PatientName;
      }
      if (other.RecordName.Length != 0) {
        RecordName = other.RecordName;
      }
      if (other.DoctorName.Length != 0) {
        DoctorName = other.DoctorName;
      }
      if (other.StartDate != 0L) {
        StartDate = other.StartDate;
      }
      if (other.MinimalValue != 0D) {
        MinimalValue = other.MinimalValue;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PatientName = input.ReadString();
            break;
          }
          case 18: {
            RecordName = input.ReadString();
            break;
          }
          case 26: {
            DoctorName = input.ReadString();
            break;
          }
          case 32: {
            StartDate = input.ReadInt64();
            break;
          }
          case 41: {
            MinimalValue = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
